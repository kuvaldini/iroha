name: Iroha1

on:
  push:
    branches: [ main, support/1.2.x ]
  pull_request:
    branches: [ main, support/1.2.x ]

jobs:
  Docker-iroha-builder:
    # if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest  ##todo [ self-hosted, Linux, ARM64 ]
    steps:
      - &cancel_previous_runs
        name: Cancel Previous Workflow Runs
        uses: n1hility/cancel-previous-runs@v2.0
        with: 
          token: ${{ secrets.GITHUB_TOKEN }}
          # workflow: build-iroha1.yml
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Git-secret to ENV
        run: |
          echo ${{secrets.GPG_KEY_TO_GIT_SECRET}} | gpg --import    ###tr , '\n' | gpg --import
          git secrets reveal
          cat .github/dockerhub.env
          cat .github/dockerhub.env >>$GITHUB_ENV
        ## todo get secrets.DOCKERHUB_USERNAME from env.DOCKERHUB_USERNAME
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: docker/develop/Dockerfile.builder
          # context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_ORG }}/iroha:builder
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - 
        name: Delay before pulling built image by next job
        run: sleep 10

  ## Build in a docker container
  build-iroha-ubuntu:
    # needs: Docker-iroha-builder  ##FIXME
    runs-on: [ self-hosted, Linux ] #ubuntu-latest
    container: ikyb/iroha:builder
    strategy:
      fail-fast: false
      matrix:
        cc: [ gcc-9, gcc-10, clang-10 ]
        # os: [ macos-latest, macos-11.0, macos-10.15 ]
        USE_BURROW: [ -DUSE_BURROW=OFF ]
        # USE_URSA: [ -DUSE_URSA=OFF ]
        ## FIXME USE_BURROW=ON Fails on macos https://github.com/kuvaldini/iroha/runs/2489119287?check_suite_focus=true
        build_type: [ Debug ] #,Release, RelWithDebInfo
    steps: &build_steps
      - *cancel_previous_runs
      - &step_export_cxx
        name: export CC and CXX
        run: |
          echo CC=${{ matrix.cc }}                                                >>$GITHUB_ENV
          echo CXX=$(echo ${{ matrix.cc }} | sed -es,gcc,g++, -es,clang,clang++,) >>$GITHUB_ENV
      - &step_todo_remove
        name: Check exported CC and CXX, TODO remove this step
        run: echo CC=$CC CXX=$CXX
      - &step_checkout
        name: Checkout
        uses: actions/checkout@v2
      - &step_vcpkg_cache
        ## Read the docs https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
        name: Cache vcpkg
        uses: actions/cache@v2
        with:
          path: |
            build-vcpkg
            build/vcpkg_installed
            $HOME/.cache/vcpkg
          key:          ${{ runner.os }}-vcpkg-${{ github.sha }}
          restore-keys: ${{ runner.os }}-vcpkg-
      - &step_vcpkg_build
        name: Build Iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg
        ## Takes 48m16s on default GitHub runner with 2 cores
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        # 
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs
      - &step_cmake_configure
        name: CMake configure
        run: >
          cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake
          -GNinja ${{ matrix.USE_BURROW }} 
          #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - &step_cmake_build
        name: CMake build
        run: cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
        ## Takes 18m44s on regular GitHub runner
      - &step_on_failure_build
        name: Show free space and disk usage
        if: ${{ always() }}
        run: | 
          set +e
          df -h
          echo; echo ----------------------; echo
          du -hd2 /
          true
      - &step_ctest
        # if: ${{ false }}  # disable for now
        name: CTest
        run: |
          set -eu
          pg_ctlcluster 12 main start 
          ###initdb --locale=C -E UTF-8 $PWD/postgres_database
          ###pg_ctl -D $PWD/postgres_database start & { sleep .3; kill -0 $!; }
          cd build && ctest --output-on-failure #--progress
        ## Takes over 4h on regular GitHub runner

  build-iroha-macos:
    if: ${{ false }}  # disable for now
    runs-on: [ self-hosted, MacOS ] #macos-latest
    strategy:
      fail-fast: false
      matrix:
        cpp: [ clang++, /usr/local/opt/llvm/bin/clang++, g++-10 ]
        # os: [ macos-latest, macos-11.0, macos-10.15 ]
        USE_BURROW: [ -DUSE_BURROW=OFF ]
        # USE_URSA: [ -DUSE_URSA=OFF ]
        ## FIXME USE_BURROW=ON Fails on macos https://github.com/kuvaldini/iroha/runs/2489119287?check_suite_focus=true
        build_type: [ Debug ] #,Release, RelWithDebInfo
    steps:
      - *step_export_cxx
      - &step_brew_install
        name: Homebrew
        run: brew install cmake ninja coreutils
        ## Takes 22 seconds with default github runner
      - 
        if: ${{matrix.cpp == 'g++-10'}}
        name: Homebrew GCC
        run: brew install gcc@10
      - *step_checkout
      - *step_vcpkg_cache
      - *step_vcpkg_build
      - *step_cmake_configure
      - *step_cmake_build
      - &step_brew_postgres
        name: Install Postgres on MacOS
        run: brew install postgresql
        ## ToDo may be optimize, i.e. cache package
      - *step_ctest

  build-iroha-windows:
    if: ${{ false }}  # disable for now
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        # cpp: [ cl, clang++, mingw++ ]
        # USE_BURROW: [ -DUSE_BURROW=OFF ]
        # USE_URSA: [ -DUSE_URSA=OFF ]
        ## FIXME USE_BURROW=ON Fails on macos https://github.com/kuvaldini/iroha/runs/2489119287?check_suite_focus=true
        build_type: [ Debug ] #,Release, RelWithDebInfo
    steps: 
      - name: uname in bash
        run: uname
        shell: bash
      - name: uname in default shell
        run: uname
      # - &step_choco_install
      #   name: Chocolatey install
      #   run: choco install cmake ninja
      - *step_checkout
      #- *step_vcpkg_cache
      - <<: *step_vcpkg_build
        shell: bash
      - *step_cmake_configure
      - <<: *step_cmake_build
        shell: bash
      -
        name: Install Postgres on Windows
        run: choco install postgresql
      # - *step_ctest
